Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT
    WHITESPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> program assign
Rule 2     program -> assign
Rule 3     assign -> ID EQUALS expr
Rule 4     expr -> term PLUS term
Rule 5     expr -> expr PLUS term
Rule 6     expr -> term MINUS term
Rule 7     expr -> expr MINUS term
Rule 8     term -> term TIMES factor
Rule 9     term -> term DIVIDE factor
Rule 10    expr -> term
Rule 11    term -> factor
Rule 12    factor -> ID
Rule 13    factor -> FLOAT_LITERAL
Rule 14    factor -> LPAREN expr RPAREN

Terminals, with rules where they appear

COMMENT              : 
DIVIDE               : 9
EQUALS               : 3
FLOAT_LITERAL        : 13
ID                   : 3 12
LPAREN               : 14
MINUS                : 6 7
PLUS                 : 4 5
RPAREN               : 14
TIMES                : 8
WHITESPACE           : 
error                : 

Nonterminals, with rules where they appear

assign               : 1 2
expr                 : 3 5 7 14
factor               : 8 9 11
program              : 1 0
term                 : 4 4 5 6 6 7 8 9 10

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . program assign
    (2) program -> . assign
    (3) assign -> . ID EQUALS expr

    ID              shift and go to state 2

    program                        shift and go to state 1
    assign                         shift and go to state 3

state 1

    (0) S' -> program .
    (1) program -> program . assign
    (3) assign -> . ID EQUALS expr

    ID              shift and go to state 2

    assign                         shift and go to state 4

state 2

    (3) assign -> ID . EQUALS expr

    EQUALS          shift and go to state 5


state 3

    (2) program -> assign .

    ID              reduce using rule 2 (program -> assign .)
    $end            reduce using rule 2 (program -> assign .)


state 4

    (1) program -> program assign .

    ID              reduce using rule 1 (program -> program assign .)
    $end            reduce using rule 1 (program -> program assign .)


state 5

    (3) assign -> ID EQUALS . expr
    (4) expr -> . term PLUS term
    (5) expr -> . expr PLUS term
    (6) expr -> . term MINUS term
    (7) expr -> . expr MINUS term
    (10) expr -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 6
    expr                           shift and go to state 10

state 6

    (4) expr -> term . PLUS term
    (6) expr -> term . MINUS term
    (10) expr -> term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    PLUS            shift and go to state 12
    MINUS           shift and go to state 13
    ID              reduce using rule 10 (expr -> term .)
    $end            reduce using rule 10 (expr -> term .)
    RPAREN          reduce using rule 10 (expr -> term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15

  ! PLUS            [ reduce using rule 10 (expr -> term .) ]
  ! MINUS           [ reduce using rule 10 (expr -> term .) ]


state 7

    (13) factor -> FLOAT_LITERAL .

    TIMES           reduce using rule 13 (factor -> FLOAT_LITERAL .)
    DIVIDE          reduce using rule 13 (factor -> FLOAT_LITERAL .)
    PLUS            reduce using rule 13 (factor -> FLOAT_LITERAL .)
    MINUS           reduce using rule 13 (factor -> FLOAT_LITERAL .)
    ID              reduce using rule 13 (factor -> FLOAT_LITERAL .)
    $end            reduce using rule 13 (factor -> FLOAT_LITERAL .)
    RPAREN          reduce using rule 13 (factor -> FLOAT_LITERAL .)


state 8

    (11) term -> factor .

    TIMES           reduce using rule 11 (term -> factor .)
    DIVIDE          reduce using rule 11 (term -> factor .)
    PLUS            reduce using rule 11 (term -> factor .)
    MINUS           reduce using rule 11 (term -> factor .)
    ID              reduce using rule 11 (term -> factor .)
    $end            reduce using rule 11 (term -> factor .)
    RPAREN          reduce using rule 11 (term -> factor .)


state 9

    (12) factor -> ID .

    TIMES           reduce using rule 12 (factor -> ID .)
    DIVIDE          reduce using rule 12 (factor -> ID .)
    PLUS            reduce using rule 12 (factor -> ID .)
    MINUS           reduce using rule 12 (factor -> ID .)
    ID              reduce using rule 12 (factor -> ID .)
    $end            reduce using rule 12 (factor -> ID .)
    RPAREN          reduce using rule 12 (factor -> ID .)


state 10

    (3) assign -> ID EQUALS expr .
    (5) expr -> expr . PLUS term
    (7) expr -> expr . MINUS term

    ID              reduce using rule 3 (assign -> ID EQUALS expr .)
    $end            reduce using rule 3 (assign -> ID EQUALS expr .)
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 11

    (14) factor -> LPAREN . expr RPAREN
    (4) expr -> . term PLUS term
    (5) expr -> . expr PLUS term
    (6) expr -> . term MINUS term
    (7) expr -> . expr MINUS term
    (10) expr -> . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 6
    expr                           shift and go to state 18

state 12

    (4) expr -> term PLUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 19

state 13

    (6) expr -> term MINUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 20

state 14

    (8) term -> term TIMES . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 21

state 15

    (9) term -> term DIVIDE . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 22

state 16

    (5) expr -> expr PLUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 23

state 17

    (7) expr -> expr MINUS . term
    (8) term -> . term TIMES factor
    (9) term -> . term DIVIDE factor
    (11) term -> . factor
    (12) factor -> . ID
    (13) factor -> . FLOAT_LITERAL
    (14) factor -> . LPAREN expr RPAREN

    ID              shift and go to state 9
    FLOAT_LITERAL   shift and go to state 7
    LPAREN          shift and go to state 11

    factor                         shift and go to state 8
    term                           shift and go to state 24

state 18

    (14) factor -> LPAREN expr . RPAREN
    (5) expr -> expr . PLUS term
    (7) expr -> expr . MINUS term

    RPAREN          shift and go to state 25
    PLUS            shift and go to state 16
    MINUS           shift and go to state 17


state 19

    (4) expr -> term PLUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 4 (expr -> term PLUS term .)
    MINUS           reduce using rule 4 (expr -> term PLUS term .)
    ID              reduce using rule 4 (expr -> term PLUS term .)
    $end            reduce using rule 4 (expr -> term PLUS term .)
    RPAREN          reduce using rule 4 (expr -> term PLUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 20

    (6) expr -> term MINUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 6 (expr -> term MINUS term .)
    MINUS           reduce using rule 6 (expr -> term MINUS term .)
    ID              reduce using rule 6 (expr -> term MINUS term .)
    $end            reduce using rule 6 (expr -> term MINUS term .)
    RPAREN          reduce using rule 6 (expr -> term MINUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 21

    (8) term -> term TIMES factor .

    TIMES           reduce using rule 8 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 8 (term -> term TIMES factor .)
    PLUS            reduce using rule 8 (term -> term TIMES factor .)
    MINUS           reduce using rule 8 (term -> term TIMES factor .)
    ID              reduce using rule 8 (term -> term TIMES factor .)
    $end            reduce using rule 8 (term -> term TIMES factor .)
    RPAREN          reduce using rule 8 (term -> term TIMES factor .)


state 22

    (9) term -> term DIVIDE factor .

    TIMES           reduce using rule 9 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 9 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 9 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 9 (term -> term DIVIDE factor .)
    ID              reduce using rule 9 (term -> term DIVIDE factor .)
    $end            reduce using rule 9 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 9 (term -> term DIVIDE factor .)


state 23

    (5) expr -> expr PLUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 5 (expr -> expr PLUS term .)
    MINUS           reduce using rule 5 (expr -> expr PLUS term .)
    ID              reduce using rule 5 (expr -> expr PLUS term .)
    $end            reduce using rule 5 (expr -> expr PLUS term .)
    RPAREN          reduce using rule 5 (expr -> expr PLUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 24

    (7) expr -> expr MINUS term .
    (8) term -> term . TIMES factor
    (9) term -> term . DIVIDE factor

    PLUS            reduce using rule 7 (expr -> expr MINUS term .)
    MINUS           reduce using rule 7 (expr -> expr MINUS term .)
    ID              reduce using rule 7 (expr -> expr MINUS term .)
    $end            reduce using rule 7 (expr -> expr MINUS term .)
    RPAREN          reduce using rule 7 (expr -> expr MINUS term .)
    TIMES           shift and go to state 14
    DIVIDE          shift and go to state 15


state 25

    (14) factor -> LPAREN expr RPAREN .

    TIMES           reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    DIVIDE          reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    PLUS            reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    MINUS           reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    ID              reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    $end            reduce using rule 14 (factor -> LPAREN expr RPAREN .)
    RPAREN          reduce using rule 14 (factor -> LPAREN expr RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for PLUS in state 6 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 6 resolved as shift
